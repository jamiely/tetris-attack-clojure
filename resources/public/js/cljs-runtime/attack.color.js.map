{"version":3,"sources":["attack/color.cljs"],"mappings":";AAQA,uBAAA,vBAAMA,sDAASC;AAAf,AACE,8CAAA,IAAA,3CAACC,6BAAkBD;;AAErB,2BAAA,3BAAME,8DAAaF;AAAnB,AAAA;AAEE,OAACG,4CAAIC,oBAAS,kDAAA,lDAACC,sDAAY,AAACN,qBAAQC;;AAEtC,0BAAA,1BAAMM,4DAAYC;AAAlB,AACE,OAACC,yBAAkBD;;AAErB,4BAAA,5BAAME,gEAAcT;AAApB,AAAA;AAEE,OAACG,4CAAIG,wBAAW,AAACJ,yBAAYF;;AAE/B,kCAAA,lCAAMU,4EAAoBC;AAA1B,AAAA;AAEE,QAAA,IAAS,AAACC,0BAAe,AAACC,kDAASF;;AAErC,mCAAA,nCAAMG,8EAAqBC;AAA3B,AAAA;AAEE,OAACL,gCAAmB,AAACP,4CAAIa,yBAAkBD;;AAE7C,8CAAA,9CAAME,oGAAgCC,IAAIC,IAAIC;AAA9C,AACE,IAAAC,kBAAK,CAAG,CAAA,MAAKF,OAAK,OAAA,NAAGD;IAArBI,kBAA+BF;AAA/B,AAAA,SAAAC,kBAAAC,mBAAAD,kBAAAC;;AAEF,+BAAA,/BAAMC,sEAAiBC,WAAWL;AAAlC,AACE,OAAChB,4CAAIsB,eAAI,4CAAA,WAAAC,vDAACvB;AAAD,AAAM,mDAAAuB,qBAAA,jEAACT,6DAAiCE;GAASK;;AAE5D,wBAAA,xBAAMG,wDAAU3B,UAAUmB;AAA1B,AACE,OAACL,iCAAoB,AAACS,6BAAgB,AAACd,0BAAaT,WACdmB","names":["attack.color/no-hash","color-str","clojure.string/replace-first","attack.color/color-parts","cljs.core.map","clojure.string/join","cljs.core.partition","attack.color/hex-to-int","hex-val","attack.compat/hex-to-int","attack.color/color-values","attack.color/color-parts-to-str","color-parts","clojure.string/upper-case","clojure.string.join","attack.color/color-values-to-str","color-values","attack.compat/int-to-hex","attack.color/increase-value-by-pct-with-cap","val","pct","cap","x__5090__auto__","y__5091__auto__","attack.color/brighten-values","color-vals","cljs.core/int","p1__23475#","attack.color/brighten"],"sourcesContent":["; DO NOT EDIT THIS FILE! IT WAS AUTOMATICALLY GENERATED BY\n; lein-cljsbuild FROM THE FOLLOWING SOURCE FILE:\n; file:/Users/jamiely/code/tetris-attack-clojure/src/clj/attack/color.clj\n\n(ns attack.color\n  (:require [clojure.string :as str]\n            [attack.compat :as compat]))\n\n(defn no-hash [color-str]\n  (str/replace-first color-str \"#\" \"\"))\n\n(defn color-parts [color-str]\n  \"Given a string like `#FFAA11`, returns a seq of parts like '(\\\"FF\\\" \\\"AA\\\" \\\"11\\\").\"\n  (map str/join (partition 2 (no-hash color-str))))\n\n(defn hex-to-int [hex-val]\n  (compat/hex-to-int hex-val))\n\n(defn color-values [color-str]\n  \"Given a string like `#FFAA11`, returns a seq of int values corresponding to each color like '(255 170 17)\"\n  (map hex-to-int (color-parts color-str)))\n\n(defn color-parts-to-str [color-parts]\n  \"Given a seq of color parts like '(\\\"FF\\\" \\\"AA\\\" \\\"11\\\"), returns \\\"#FFAA11\\\"\"\n  (str \"#\" (str/upper-case (str/join color-parts))))\n\n(defn color-values-to-str [color-values]\n  \"Given a seq of color values like '(255 170 17) returns a string \\\"#FFAA11\\\"\"\n  (color-parts-to-str (map compat/int-to-hex color-values)))\n\n(defn increase-value-by-pct-with-cap [val pct cap]\n  (min (* (+ 1 pct) (+ val 100)) cap))\n\n(defn brighten-values [color-vals pct]\n  (map int (map #(increase-value-by-pct-with-cap % pct 255) color-vals)))\n\n(defn brighten [color-str pct]\n  (color-values-to-str (brighten-values (color-values color-str)\n                                        pct)))\n\n"]}