{"version":3,"sources":["attack/compat.cljs"],"mappings":";AAIA,oBAAA,pBAAMA,gDAAKC;AAAX,AACE,OAAMC,YAAW,4CAAKD;;AAExB,mCAAA,nCAAME,8EAAoBC;AAA1B,AACE,OAACC,sDAAmBD;;AAEtB,oBAAA,4BAAAE,SAAAC,zDAAMU;AAAN,AAAA,IAAAT,aAAAF;IAAAG,aAAA,AAAAC,cAAAF;IAAAG,eAAA,AAAAC,gBAAAH;IAAAA,iBAAA,AAAAI,eAAAJ;QAAAE,JAAYO;SAAZT,LAAgBU;IAAhBL,aAAAP;IAAAQ,aAAA,AAAAL,cAAAI;IAAAE,eAAA,AAAAJ,gBAAAG;IAAAA,iBAAA,AAAAF,eAAAE;QAAAC,JACYI;SADZL,LACgBM;AADhB,AAEE,GAAI,EAAI,MAAA,LAAMH,gBAAG,MAAA,LAAME;AAAvB,AAAA;;AAEE,sBAAA,fAACE,kGAAMJ,EAAEE,UAAG,CAACH,kDAAAA,yDAAAA,TAAIE,sCAAAA,nCAAGE,sCAAAA;;;AAExB,uBAAA,vBAAME,sDAAQC;AAAd,AACE,OAAUA;;AAEZ,oBAAA,pBAAMC,gDAAKC,KAAKC;AAAhB,AACE,OAAMC,SAAQF,KAAKC;;AAErB,gCAAA,hCAAME,wEAAiBC;AAAvB,AACE,OAACC,4CAAI,kEAAA,lEAACC,gDAAQP,wBAAQ,AAACQ,8CAAM,8CAAA,9CAACC,kDAAQJ;;AAExC,iCAAA,jCAAMK,0EAAkBC;AAAxB,AACE,IAAAC,WAAMD;AAAN,AAAA,QAAAC;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,mEAAAD;;;;AAkBF,iCAAA,jCAAME,0EAAkBC;AAAxB,AACE,IAAAC,WAAMD;AAAN,AAAA,QAAAC;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;;AAAA,MAAA,KAAAH,MAAA,CAAA,mEAAAG;;;;AAkBF,2BAAA,3BAAMC,8DAAYC;AAAlB,AACE,IAAMC,IAAE,AAACrB,qBAAOoB;IACVE,QAAM,AAACZ,8CAAM,AAACJ,8BAAgBe;IAC9BE,aAAW,AAACC,kBAAQ,AAACd,8CAAM,AAACF,4CAAIQ,+BAAiBI;IACjDK,QAAM,AAAC/B,kBAAI4B,MAAMC;IACjBG,OAAK,AAAChB,8CAAM,AAACF,4CAAI,WAAAmB;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAMjC;QAAN,AAAAkC,4CAAAD,WAAA,IAAA,/DAAQ/B;AAAR,AAAY,QAAGF,IAAEE;GAAI4B;IACtCK,MAAI,AAACC,+CAAOC,iBAAEN;AALpB,AAMEI;;AAEJ,2BAAA,3BAAMG,8DAAYC;AAAlB,AACE,IAAMvC,IAAE,cAAA,bAAK,KAAA,JAAGuC;IACVrC,IAAE,gBAAA,hBAACsC,cAAID;AADb,AAEE,OAACE,kDAAS,uIAAA,vIAAC5B,4CAAI,AAAC6B,6CAAKzB,+BAAiB0B,kGAAM3C,EAAEE","names":["attack.compat/log","msg","js/console","attack.compat/compat-read-string","val","cljs.reader.read_string","p__23416","p__23417","vec__23418","seq__23419","cljs.core/seq","first__23420","cljs.core/first","cljs.core/next","vec__23421","seq__23422","first__23423","attack.compat/zip","a","as","b","bs","cljs.core/cons","attack.compat/length","str","attack.compat/pow","base","exp","js/Math","attack.compat/hex-multipliers","len","cljs.core.map","cljs.core.partial","cljs.core.doall","cljs.core.range","attack.compat/int-digit-to-hex","int-dig","G__23466","js/Error","attack.compat/hex-digit-to-int","hex-dig","G__23468","attack.compat/hex-to-int","hex-str","l","mults","hex-digits","cljs.core/reverse","parts","vals","p__23469","vec__23470","cljs.core.nth","sum","cljs.core.reduce","cljs.core/+","attack.compat/int-to-hex","i","cljs.core/mod","clojure.string.join","cljs.core.comp","cljs.core/str"],"sourcesContent":["(ns attack.compat\n  (:require [cljs.reader :as reader]\n            [clojure.string :as str]))\n\n(defn log [msg]\n  (.log js/console (str msg)))\n\n(defn compat-read-string [val]\n  (reader/read-string val))\n\n(defn zip [[a & as]\n           [b & bs]]\n  (if (or (nil? a) (nil? b))\n    '()\n    (cons [a b] (zip as bs))))\n\n(defn length [str]\n  (.-length str))\n\n(defn pow [base exp]\n  (.pow js/Math base exp))\n\n(defn hex-multipliers [len]\n  (map (partial pow 16) (doall (range 0 len))))\n\n(defn int-digit-to-hex [int-dig]\n  (case int-dig\n    \"15\" \"F\" \n    \"14\" \"E\" \n    \"13\" \"D\" \n    \"12\" \"C\" \n    \"11\" \"B\" \n    \"10\" \"A\" \n    \"9\"  \"9\" \n    \"8\"  \"8\" \n    \"7\"  \"7\" \n    \"6\"  \"6\" \n    \"5\"  \"5\" \n    \"4\"  \"4\" \n    \"3\"  \"3\" \n    \"2\"  \"2\" \n    \"1\"  \"1\" \n    \"0\"  \"0\"))\n\n(defn hex-digit-to-int [hex-dig]\n  (case hex-dig\n    \"F\" 15\n    \"E\" 14\n    \"D\" 13\n    \"C\" 12\n    \"B\" 11\n    \"A\" 10\n    \"9\" 9\n    \"8\" 8\n    \"7\" 7\n    \"6\" 6\n    \"5\" 5\n    \"4\" 4\n    \"3\" 3\n    \"2\" 2\n    \"1\" 1\n    \"0\" 0))\n\n(defn hex-to-int [hex-str]\n  (let [l (length hex-str)\n        mults (doall (hex-multipliers l))\n        hex-digits (reverse (doall (map hex-digit-to-int hex-str)))\n        parts (zip mults hex-digits)\n        vals (doall (map (fn [[a b]] (* a b)) parts))\n        sum (reduce + vals)]\n    sum))\n\n(defn int-to-hex [i]\n  (let [a (int (/ i 16))\n        b (mod i 16)]\n    (str/join (map (comp int-digit-to-hex str) [a b]))))\n    \n"]}