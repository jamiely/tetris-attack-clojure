{"version":3,"sources":["attack/entrypoint.cljs"],"mappings":";AAKA;;;AAAKA,qCAEH,AAACC,gBAAM,gIAAA,hIAACC,+CAAO,AAACC,6CAAKC,cAAIC,yGACT,AAAyBC,6BACzB,AAA4BA,gCAC5B,AAA2BA,+BAC3B,AAA+BA;AAEjD,iCAAA,jCAAMC,0EAAcC;AAApB,AACE,QAACR,mEAAAA,6EAAAA,ZAAiBQ,0DAAAA;;AAEpB,AAAKC,uBAAG,AAACC,6CAAK,AAACC;AAEf,mCAAA,nCAAMC;AAAN,AACE,OAACC;;AAEH,2BAAA,3BAAMC;AAAN,AACE,OAAU,KAAKC;;AAEjB,4BAAA,5BAAMC,gEAASC;AAAf,AACE,OAACN;;AAGH,wBAAA,xBAAMO,wDAAKC;AAAX,AACE,OAAMC,YAAWD;;AAEnB,yBAAA,zBAAME;AAAN,AACE,OAACC,mDAAMb,qBAAGc;;AACZ,0BAAA,1BAAMC,4DAAOC;AAAb,AACE,OAAQC,WAAQD;;AAElB,2BAAA,3BAAME,8DAAQC;AAAd,AACE,IAAMC,aAAW,CAAG,AAACf,6BAAQc;IACvBE,MAAI,AAACN,wBAAM,sBAAA,rBAAG,CAAA,MAAKK;AADzB,AAEE,6BAAA,AAAAE,tBAACC,sCAAavB,sBAAGqB;;AAErB,8BAAA,9BAAKG;AAEL,mCAAA,nCAAMC;AAAN,AACE,OAACC,YAAed,uBAAKY;;AAGvB,oCAAA,pCAAMG;AAAN,AACE,IAAMC,eAAa,AAACvB;AAApB,AACE,OAACwB,WAAc;AAAA,AACE,AAACX,yBAAOU;;AACR,OAAC9B,+BAAa6B;GAChBH;;AAEnB,0BAAA,1BAAMM,4DAAOd;AAAb,AACE,IAAAe,WAAMf;AAAN,AAAA,QAAAe;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;;AAAA;;;;AAcF,gCAAA,hCAAMC,wEAAaC;AAAnB,AACE,AAACxB,sBAAIwB;;AACLC;;AAEF,kCAAA,lCAAeC,4EAAeF;AAA9B,AAAA;AAEE,IAAMG,OAAK,iBAAAC,WAAM,AAACP,wBAAM,AAASG;IAAtBI,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AACSE;;;KADT;AAESA;;;KAFT;AAGSC;;;KAHT;AAISC;;;KAJT;AAKSC;;;KALT;AAMSC;;;KANT;AAOSC;;;KAPT;AAQSrC;;;KART;AASesC;;;KATf;AAUSC;;;;AACP,OAACd,8BAAYC;;;;AAX1B,AAYE,OAACpB,mDAAMb,qBAAGoC;;;AAMd,yBAAA,zBAAeW,0DAAMC;AAArB,AAAA;AAEE,AAACvC,sBAAI,CAAA,4DAAA,AAAAa,gBAAsBtB;;AAC3B,AAACG;;AACD,AAACsB;;AACD,OAACE","names":["attack.entrypoint/request-anim-fun","cljs.core/first","cljs.core.filter","cljs.core.comp","cljs.core/not","cljs.core/nil?","js/window","attack.entrypoint/request-anim","callback","attack.entrypoint/GI","cljs.core.atom","attack.game-interface/default","attack.entrypoint/initial-render","attack.display/draw-grid","attack.entrypoint/jstime","js/Date","attack.entrypoint/restart","_","attack.entrypoint/log","msg","js/console","attack.entrypoint/step","cljs.core.swap_BANG_","attack.display/step","attack.entrypoint/floor","num","js/Math","attack.entrypoint/render","last-time","time-delta","fps","cljs.core/deref","attack.display/render","attack.entrypoint/step-rate","attack.entrypoint/begin-stepping","js/setInterval","attack.entrypoint/begin-rendering","current-time","js/setTimeout","attack.entrypoint/which","G__23749","attack.entrypoint/inspect-key","event","cljs.core/identity","attack.entrypoint/keyup-handler","func","G__23750","cljs.core/Keyword","attack.display/cursor-swap","attack.display/cursor-left","attack.display/cursor-right","attack.display/cursor-up","attack.display/cursor-down","attack.display/add-line","attack.display/add-garbage-block","attack.display/inspect","attack.entrypoint/init","key-binder"],"sourcesContent":["(ns attack.entrypoint\n  (:require [attack.game-interface :as gi]\n            [attack.cursor :as cursor]\n            [attack.display :as disp]))\n\n(def request-anim-fun\n  \"Use this to queue a drawing of the board\"\n  (first (filter (comp not nil?)\n                 [(.-requestAnimationFrame js/window)\n                  (.-mozRequestAnimationFrame js/window)\n                  (.-msRequestAnimationFrame js/window)\n                  (.-webkitRequestAnimationFrame js/window)])))\n\n(defn request-anim [callback]\n  (request-anim-fun callback))\n\n(def GI (atom (gi/default)))\n  \n(defn initial-render []\n  (disp/draw-grid))\n\n(defn jstime []\n  (.getTime (new js/Date)))\n\n(defn restart [_]\n  (gi/default))\n\n;; (swap! GI (disp/step @GI))\n(defn log [msg]\n  (.log js/console msg))\n\n(defn step []\n  (swap! GI disp/step))\n(defn floor [num]\n  (.floor js/Math num))\n\n(defn render [last-time]\n  (let [time-delta (- (jstime) last-time)\n        fps (floor (* (/ 1 time-delta) 1000))]\n    (disp/render @GI fps)))\n\n(def step-rate 30)\n\n(defn begin-stepping []\n  (js/setInterval step step-rate)\n  )\n\n(defn begin-rendering []\n  (let [current-time (jstime)]\n    (js/setTimeout (fn []\n                     (render current-time)\n                     (request-anim begin-rendering))\n                   step-rate)))\n\n(defn which [num]\n  (case num\n    13 :ENTER\n    49 :EXCLAMATION\n    39 :RIGHT\n    37 :LEFT\n    38 :UP\n    32 :SPACE\n    40 :DOWN\n    78 :N\n    80 :P\n    82 :R\n    191 :QMARK\n    :UNSUPPORTED))\n\n(defn inspect-key [event]\n  (log event)\n  identity)\n\n(defn ^:export keyup-handler [event]\n  \"The handler for keys. Make sure to bind this specifically\"\n  (let [func (case (which (.-which event))\n               :ENTER disp/cursor-swap\n               :SPACE disp/cursor-swap\n               :LEFT  disp/cursor-left\n               :RIGHT disp/cursor-right\n               :UP    disp/cursor-up\n               :DOWN  disp/cursor-down\n               :R     disp/add-line\n               :N     restart\n               :EXCLAMATION disp/add-garbage-block\n               :QMARK disp/inspect\n               (inspect-key event))]\n    (swap! GI func)))\n\n;; (defn bind-keys []\n;;   (let [body (js/$ \"body\")]\n;;     (.keyup body keyup-handlers)))\n\n(defn ^:export init [key-binder]\n  \"Initializes all the functions required for the game\"\n  (log (str \"Initializing \" @GI))\n  (initial-render)\n  (begin-stepping)\n  (begin-rendering))\n        \n"]}