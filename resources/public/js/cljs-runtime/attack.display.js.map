{"version":3,"sources":["attack/display.cljs"],"mappings":"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","names":["attack.display/WHITE","attack.display/BLUE","attack.display/BLOCKWIDTH","attack.display/BLOCKHEIGHT","attack.display/BLOCKSIZE","attack.display/DISPLAYHEIGHT","attack.display/DISPLAYWIDTH","attack.display/disp-info","total-rows","attack.display/orect","context","color","x","y","w","h","attack.display/canvas","js/document","attack.display/draw-context","p__23651","map__23652","cljs.core/--destructure-map","cljs.core.get","attack.display/draw-block-fun","fun","pt","vec__23653","cljs.core.nth","attack.display-math/pt-to-display-pt","G__23656","G__23657","G__23658","G__23659","G__23660","G__23661","cljs.core/name","p__23662","map__23663","attack.display/render-cursor","cursor","nofill-block","vec__23664","attack.point/point-add","attack.point/point","attack.display/fill","attack.display/rect","attack.display/render-clock","clock","attack.display/render-fps","fps","attack.display/draw-grid","p__23667","map__23668","attack.display/brighten-block","type","blk","factor","cljs.core.assoc","attack.color/brighten","p__23670","map__23671","attack.display/draw-disappear-block","blocks","ticks","p1__23669#","alter1","alter","p__23672","map__23673","max-ticks","bs","cljs.core.doall","cljs.core.map","cljs.core.partial","attack.display/draw-block","attack.display/make-gray","block","p__23674","map__23675","attack.display/draw-swap-block","p__23676","map__23677","attack.display/draw-falling-block","inner-block","p__23678","map__23679","attack.display/draw-swap-empty-block","into-pos","attack.display/draw-garbage-block-with-color","points","attack.block/garbage-block-points","p1__23680#","attack.block/new-simple","p__23682","map__23683","map__23684","attack.display/draw-dissolve-block","pos","length","height","inner","pending","dissolve","vec__23685","vec__23688","vec__23691","ox","oy","attack.point/below","apos","ox'","oy'","ax'","ay'","width","p1__23681#","G__23694","G__23695","attack.display/draw-garbage-block","p__23696","map__23697","fn-draw","G__23698","cljs.core/Keyword","p__23699","p__23700","map__23701","map__23702","vec__23703","attack.display/out-of-bounds?","rows","cols","p__23706","map__23707","map__23708","attack.display/cursor-mod","game","origin","gi","new-orig","new-cursor","attack.display/cursor-down","attack.display/cursor-up","attack.display/cursor-left","attack.display/cursor-right","p__23709","map__23710","map__23711","attack.display/cursor-swap-fill","gr","a","b","new-grid","attack.grid/swap-blocks","p__23712","p__23713","map__23714","map__23715","vec__23716","attack.display/cursor-swap-empty","after-pos","attack.grid/swap-empty","p__23720","map__23721","map__23722","map__23723","attack.display/cursor-swap","vec__23724","b-pt","attack.point/after","p1__23719#","attack.grid/block-at","cljs.core/every?","cljs.core/nil?","cljs.core.comp","cljs.core/not","cljs.core/first","cljs.core.filter","p__23727","vec__23728","p__23731","map__23732","attack.display/add-line","g","attack.game/add-line","p__23733","map__23734","attack.display/add-garbage-block","attack.game/add-garbage","attack.display/inspect","p1__23735#","log","js/console","log-blks","thing","grid","fallers","attack.grid/fallers","p__23736","map__23737","attack.display/render-grid","attack.display/init","attack.game-interface/default","attack.display/step","game-interface","attack.game-interface/step","attack.display/render-game-over","vec__23738","p__23741","map__23742","map__23743","map__23744","attack.display/render-game-active","p__23745","map__23746","map__23747","map__23748","attack.display/render","attack.game/game-over?"],"sourcesContent":["(ns attack.display\n  (:require [attack.game :as game]\n            [attack.point :as pt]\n            [attack.block :as blk]\n            [attack.grid :as grid]\n            [attack.color :as color]\n            [attack.display-math :as dispm]\n            [attack.game-interface :as gi]))\n\n(def WHITE \"white\")\n(def BLUE \"blue\")\n\n(def BLOCKWIDTH 30)\n(def BLOCKHEIGHT 30)\n(def BLOCKSIZE [BLOCKWIDTH BLOCKHEIGHT])\n(def DISPLAYHEIGHT 400)\n(def DISPLAYWIDTH (* 9 BLOCKWIDTH))\n\n(defn disp-info [total-rows]\n  {:total-rows total-rows\n   :block-height BLOCKHEIGHT\n   :block-width BLOCKWIDTH\n   :display-height DISPLAYHEIGHT})\n\n(defn orect [context color x y w h]\n  (set! (.-lineWidth context) 3)\n  (set! (.-strokeStyle context) color)\n  (.strokeRect context x y w h))\n\n(defn canvas []\n  (.getElementById js/document \"canvas\"))\n\n(defn draw-context []\n  (.getContext (canvas) \"2d\"))\n\n(defn draw-block-fun [total-rows fun {pt :position color :type}]\n  (let [[x y] (dispm/pt-to-display-pt (disp-info total-rows) pt)]\n    (fun (draw-context) (name color) x y BLOCKWIDTH BLOCKHEIGHT)))\n\n(defn render-cursor [total-rows {pt :origin :as cursor}]\n  (let [context (draw-context)\n        nofill-block (fn [pt]\n                       (let [[x y] (dispm/pt-to-display-pt (disp-info total-rows) pt)]\n                         (orect context \"black\" x y BLOCKWIDTH BLOCKHEIGHT)))]\n    (nofill-block pt)\n    (nofill-block (pt/point-add pt (pt/point 1 0)))))\n\n(defn fill [context color]\n  (set! (.-fillStyle context) color))\n\n(defn rect [context color x y w h]\n  (fill context color)\n  (.fillRect context x y w h))\n\n(defn render-clock [clock]\n  (let [context (draw-context)]\n    (fill context \"black\")\n    (set! (.-font context) \"bold 12px sans-serif\")\n    (.fillText context (str \"Clock \" clock), BLOCKWIDTH, 10)))\n\n(defn render-fps [fps]\n  (let [context (draw-context)]\n    (fill context \"red\")\n    (set! (.-font context) \"bold 12px sans-serif\")\n    (.fillText context (str \"FPS \" fps), (* 5 BLOCKWIDTH), 10)))\n\n\n(defn draw-grid []\n  (rect (draw-context) WHITE 0 0 DISPLAYWIDTH DISPLAYHEIGHT))\n\n(declare draw-block)\n\n(defn brighten-block [{type :type :as blk} factor]\n  (assoc blk :type (color/brighten (str type)\n                                   factor)))\n\n(defn draw-disappear-block [total-rows {blocks :blocks ticks :ticks}]\n  (let [alter1 #(assoc %1 :type :black)\n        alter (fn [{type :type :as blk}]\n                (let [color (str type)\n                      max-ticks 20\n                      factor (+ (/ (- max-ticks ticks) 20) 0.2)]\n                  (brighten-block blk factor)))\n        bs (doall (map alter blocks))]\n    (doall (map (partial draw-block total-rows) bs))))\n\n(defn make-gray [block]\n  (assoc block :type :gray))\n\n(defn draw-swap-block [total-rows {blocks :blocks ticks :ticks}]\n  (let [bs (doall (map make-gray blocks))]\n    (doall (map (partial draw-block total-rows) bs))))\n\n(defn draw-falling-block [total-rows {inner-block :block}]\n  (draw-block total-rows inner-block))\n\n(defn draw-swap-empty-block [total-rows {block :block into-pos :into-position}]\n  (map (partial draw-block total-rows) [(make-gray block)]))\n   \n(defn draw-garbage-block-with-color [total-rows\n                                     block\n                                     color]\n  (let [points (blk/garbage-block-points block)\n        blocks (doall (map #(blk/new-simple % color) points))]\n    (doall (map (partial draw-block total-rows) blocks))))\n\n(defn draw-dissolve-block [total-rows {{pos :position\n                                        length :length height :height\n                                        :as inner} :garbage-block\n                                       pending :pending-blocks\n                                       :as dissolve}]\n  (let [[ox oy] (pt/below pos)\n        apos (pt/point (+ ox length) (+ oy height))\n        [ox' oy'] (dispm/pt-to-display-pt (disp-info total-rows) [ox oy])\n        [ax' ay'] (dispm/pt-to-display-pt (disp-info total-rows) apos)\n        width (- ax' ox')\n        height (- oy' ay')\n        context (draw-context)]\n  (draw-garbage-block-with-color total-rows inner :AAA)\n  (doall (map #(draw-block total-rows (brighten-block % 0.9))\n              pending))\n  (orect context \"black\" ox' oy' width height)))\n   \n(defn draw-garbage-block [total-rows block]\n  (draw-garbage-block-with-color total-rows block :black))\n\n(defn draw-block [total-rows {type :type :as block}]\n  (let [fn-draw (case type\n                  :dissolve (partial draw-dissolve-block total-rows)\n                  :garbage (partial draw-garbage-block total-rows)\n                  :swap (partial draw-swap-block total-rows)\n                  :swap-empty (partial draw-swap-empty-block total-rows)\n                  :disappear (partial draw-disappear-block total-rows)\n                  :falling (partial draw-falling-block total-rows)\n                  (partial draw-block-fun total-rows rect))]\n    (fn-draw block)))\n\n(defn out-of-bounds? [{{rows :rows cols :cols} :grid} [x y]]\n  (not (and (< 0 x)\n            (< 0 y)\n            (>= rows y)\n            (> cols x))))\n\n(defn cursor-mod [{game :game {origin :origin :as cursor} :cursor :as gi} pt]\n  (let [new-orig (pt/point-add origin pt)\n        new-cursor (assoc cursor :origin new-orig)]\n    (if (out-of-bounds? game new-orig)\n      gi\n      (assoc gi :cursor new-cursor))))\n\n(defn cursor-down [gi]\n  (cursor-mod gi (pt/point 0 1)))\n\n(defn cursor-up [gi]\n  (cursor-mod gi (pt/point 0 -1)))\n\n(defn cursor-left [gi]\n  (cursor-mod gi (pt/point -1 0)))\n\n(defn cursor-right [gi]\n  (cursor-mod gi (pt/point 1 0)))\n\n(defn cursor-swap-fill [{{gr :grid :as game} :game :as gi}\n                        a b]\n  (let [new-grid (grid/swap-blocks gr a b)]\n    (assoc gi :game (assoc game :grid new-grid))))\n\n(defn cursor-swap-empty [{{gr :grid :as game} :game :as gi}\n                         [block after-pos]]\n  (assoc gi :game (assoc game :grid (grid/swap-empty gr\n                                                     block\n                                                     after-pos))))\n\n(defn cursor-swap [{{gr :grid} :game {origin :origin} :cursor :as gi}] \n  (let [b-pt (pt/after origin)\n        [a b] (doall (map #(grid/block-at gr %)\n                          [origin b-pt]))]\n    (if (every? nil? [a b])\n      gi\n      (if (every? (comp not nil?) [a b])\n        (cursor-swap-fill gi a b)\n        (cursor-swap-empty gi\n                           (first (filter (fn [[blk pt]] (not (nil? blk)))\n                                          [[a b-pt] [b origin]])))))))\n\n(defn add-line [{g :game :as gi}]\n  (assoc gi :game (game/add-line g)))\n\n(defn add-garbage-block[{g :game :as gi}]\n  (assoc gi :game (game/add-garbage g)))\n\n(defn inspect [gi]\n  (let [log #(.log js/console (str %))\n        log-blks (fn [thing]\n                   (log thing)\n                   (let [blocks (:blocks thing)]\n                     (if (not (nil? blocks))\n                       (doall (map log blocks)))))\n        grid (:grid (:game gi))\n        blocks (:blocks grid)\n        fallers (grid/fallers grid)]\n    ;;(doall (map log-blks blocks)))\n    (log (str \"Game interface\"))\n    (log gi)\n    (log (str \"Fallers\"))\n    (log fallers))\n  gi)\n\n(defn render-grid [{total-rows :rows :as grid}]\n    (doall (map (partial draw-block total-rows) (:blocks grid))))\n\n(defn init[]\n  (draw-grid)\n  (gi/default))\n\n(defn step [game-interface]\n  (gi/step game-interface))\n\n(defn render-game-over [gi]\n  (let [context (draw-context)\n        [x y] [BLOCKWIDTH (/ DISPLAYHEIGHT 2)]]\n    (rect context \"black\" x (- y BLOCKHEIGHT) DISPLAYWIDTH (* BLOCKHEIGHT 2))\n    (fill context \"white\")\n    (set! (.-font context) \"bold 20px sans-serif\")\n    (.fillText context (str \"Game over\"), (+ x BLOCKWIDTH), y)))\n\n(defn render-game-active [{{clock :clock {rows :rows} :grid} :game cursor :cursor}]\n  (render-clock clock)\n  (render-cursor rows cursor))\n\n(defn render[{{{rows :rows :as grid} :grid clock :clock :as game} :game cursor :cursor :as gi} fps]\n  (draw-grid)\n  (render-grid grid)\n  (render-fps fps)\n  (if (game/game-over? game)\n    (render-game-over gi)\n    (render-game-active gi)))\n\n"]}