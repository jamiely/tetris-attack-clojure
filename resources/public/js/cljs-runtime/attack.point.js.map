{"version":3,"sources":["attack/point.cljs"],"mappings":";AAMA,qBAAA,rBAAMA,kDAAOC,EAAEC;AAAf,AAAA,0FACGD,EAAEC;;AAEL,yBAAA,iCAAAC,SAAAC,nEAAMI;AAAN,AAAA,IAAAH,aAAAF;SAAA,AAAAG,4CAAAD,WAAA,IAAA,hEAAkBI;SAAlB,AAAAH,4CAAAD,WAAA,IAAA,hEAAqBK;IAArBH,aAAAH;SAAA,AAAAE,4CAAAC,WAAA,IAAA,hEAA0BI;SAA1B,AAAAL,4CAAAC,WAAA,IAAA,hEAA6BK;AAA7B,AAAA,0FACG,CAAGH,KAAGE,IAAI,CAAGD,KAAGE;;AAEnB,kBAAA,lBAAMC;AAAN,AACE,0BAAA,IAAA,vBAACb;;AAEH,oBAAA,pBAAMc;AAAN,AACE,0BAAA,IAAA,vBAACd;;AAEH,oBAAA,pBAAMe;AAAN,AACE,0BAAA,KAAA,xBAACf;;AAEH,qBAAA,rBAAMgB;AAAN,AACE,0BAAA,IAAA,vBAAChB;;AAEH,qBAAA,rBAAMiB,kDAAOC;AAAb,AACE,OAACV,uBAAUU,GAAG,AAACL;;AAEjB,qBAAA,rBAAMM,kDAAOD;AAAb,AACE,OAACV,uBAAUU,GAAG,AAACJ;;AAEjB,qBAAA,rBAAMM,kDAAOF;AAAb,AACE,OAACV,uBAAUU,GAAG,AAACF;;AAEjB,sBAAA,tBAAMK,oDAAQH;AAAd,AACE,OAACV,uBAAUU,GAAG,AAACH;;AAEjB,0BAAA,1BAAMO;AAAN,AAAA,0FACG,AAACP,oBAAM,AAACC;;AAEX,wBAAA,xBAAMO;AAAN,AAAA,0FACG,AAACT,oBAAM,AAACD;;AAEX,0BAAA,1BAAMW;AAAN,AACE,OAACC,+CAAO,AAACH,0BAAY,AAACC","names":["attack.point/point","x","y","p__21444","p__21445","vec__21446","cljs.core.nth","vec__21449","attack.point/point-add","x1","y1","x2","y2","attack.point/up","attack.point/down","attack.point/left","attack.point/right","attack.point/above","pt","attack.point/below","attack.point/after","attack.point/before","attack.point/horizontal","attack.point/vertical","attack.point/directions","cljs.core.concat"],"sourcesContent":["; DO NOT EDIT THIS FILE! IT WAS AUTOMATICALLY GENERATED BY\n; lein-cljsbuild FROM THE FOLLOWING SOURCE FILE:\n; file:/Users/jamiely/code/tetris-attack-clojure/src/clj/attack/point.clj\n\n(ns attack.point)\n\n(defn point [x y]\n  [x y])\n\n(defn point-add [[x1 y1] [x2 y2]]\n  [(+ x1 x2) (+ y1 y2)])\n\n(defn up []\n  (point 0 -1))\n\n(defn down []\n  (point 0 1))\n\n(defn left []\n  (point -1 0))\n\n(defn right []\n  (point 1 0))\n\n(defn above [pt]\n  (point-add pt (up)))\n\n(defn below [pt]\n  (point-add pt (down)))\n\n(defn after [pt]\n  (point-add pt (right)))\n\n(defn before [pt]\n  (point-add pt (left)))\n\n(defn horizontal []\n  [(left) (right)])\n\n(defn vertical []\n  [(down) (up)])\n\n(defn directions []\n  (concat (horizontal) (vertical)))\n\n"]}