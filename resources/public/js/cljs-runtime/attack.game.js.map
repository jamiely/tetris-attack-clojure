{"version":3,"sources":["attack/game.cljs"],"mappings":"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","names":["attack.game/adjusted-grid","cols","rows","def","attack.grid/default","removed","attack.grid/remove-blocks","cljs.core.into","cljs.core.reduce","grid","f","cljs.core.repeat","attack.grid/add-row","attack.game/default","vec__23607","cljs.core.nth","p__23610","map__23611","cljs.core/--destructure-map","cljs.core.get","attack.game/game-over?","max-lines","game","attack.grid/line-count","p__23612","map__23613","attack.game/tick","clock","cljs.core.assoc","p__23614","map__23615","attack.game/mod-clock?","operand","cljs.core._EQ_","cljs.core/mod","p__23616","map__23617","attack.game/add-line","p__23618","map__23619","attack.game/step-add-line","add-line-ticks","p__23620","p__23621","map__23622","map__23623","attack.game/mark-dirty","old-grid","new-grid","new-game","attack.grid/simple-blocks-match?","p__23628","map__23629","attack.game/add-garbage-block","garbage","attack.grid/add-blocks","p__23630","map__23631","attack.game/add-garbage","attack.block/new-garbage","attack.point/point","p__23632","map__23633","attack.game/random-garbage-block","length","cljs.core/rand-int","x","p__23634","map__23635","attack.game/add-random-garbage-every-n-steps","n-steps","p__23636","map__23637","attack.game/cache-grid-clock","p__23639","map__23640","attack.game/step","dirty","map__23642","status","map__23643","dirty?","g","attack.grid/resolve-grid"],"sourcesContent":["; DO NOT EDIT THIS FILE! IT WAS AUTOMATICALLY GENERATED BY\n; lein-cljsbuild FROM THE FOLLOWING SOURCE FILE:\n; file:/Users/jamiely/code/tetris-attack-clojure/src/clj/attack/game.clj\n\n(ns attack.game\n  (:require [attack.grid :as grid]\n            [attack.tick :as tick]\n            [attack.block :as blk])\n  (:use [attack.point :only [point point-add]]))\n\n(defn adjusted-grid [cols rows]\n  (let [def (grid/default cols 13)\n        removed (grid/remove-blocks def (into #{} (:blocks def)))]\n    (reduce (fn [grid f] (f grid)) removed (repeat rows grid/add-row))))\n\n(defn default []\n  (let [[rows cols] [3 6]]\n    {:grid (adjusted-grid cols rows)\n     :status :active\n     :max-lines 13\n     ;; everything is based on the clock\n     :clock 0\n     ;; is game dirty, meaning does it need to be checked for matches\n     :dirty false\n     ;; add a line after this many ticks\n     :add-line-ticks 120}))\n\n(defn game-over? [{grid :grid max-lines :max-lines :as game}]\n  (> (grid/line-count grid) max-lines))\n\n(defn tick [{clock :clock grid :grid :as game}]\n  \"Increments the clock of a game\"\n  (assoc game :clock (+ clock 1)))\n\n(defn mod-clock? [{clock :clock} operand]\n  (= 0 (mod clock operand)))\n\n(defn add-line [{grid :grid :as game}]\n  (assoc game :grid (grid/add-row grid)))\n\n(defn step-add-line [{add-line-ticks :add-line-ticks :as game}]\n  (if (mod-clock? game add-line-ticks)\n    (add-line game)\n    game))\n\n(defn mark-dirty [{old-grid :grid} {new-grid :grid :as new-game}]\n  (assoc new-game\n         :dirty\n         (not (grid/simple-blocks-match? old-grid new-grid))))\n\n\n(defn add-garbage-block [{grid :grid :as game} garbage]\n  (let [new-grid (grid/add-blocks grid #{garbage})] \n    (assoc game :grid new-grid)))\n\n(defn add-garbage [{grid :grid :as game}]\n  (let [garbage (blk/new-garbage (point 1 1) 5 1)] \n    (add-garbage-block game garbage)))\n\n(defn random-garbage-block [{cols :cols rows :rows :as grid}]\n  (let [length (+ 3 (rand-int (- cols 3)))\n        x (+ 1 (rand-int (- cols length -1)))]\n    (blk/new-garbage (point x (- rows 11))\n                     length\n                     (+ 1 (rand-int 2)))))\n\n(defn add-random-garbage-every-n-steps [{grid :grid clock :clock :as game} n-steps]\n  (if (= 0 (mod clock n-steps))\n    (add-garbage-block game (random-garbage-block grid))\n    game))\n\n(defn cache-grid-clock [{grid :grid clock :clock :as game}]\n  \"Caches the game clock in the grid for calculation purposes\"\n  (assoc game :grid (assoc grid :cache-clock clock)))\n\n(defn step [{dirty :dirty :as game}]\n  \"Steps a game by 1\"\n  (if (game-over? game)\n    (let [{status :status} game]\n      (assoc game :status :game-over))\n    (let [{grid :grid dirty? :dirty :as g} (tick game)\n          new-grid (grid/resolve-grid grid dirty?)\n          new-game (add-random-garbage-every-n-steps\n                    (step-add-line (assoc g :grid new-grid))\n                    201)]\n      (mark-dirty game (cache-grid-clock new-game)))))\n\n\n"]}