{"version":3,"sources":["attack/block.cljs"],"mappings":"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","names":["attack.block/types","attack.block/rand-type","cljs.core/rand-nth","attack.block/new-simple","pos","type","attack.block/new-complex","blocks","attack.block/swap-block-default-ticks","attack.block/new-swap","a","b","attack.block/new-swap-empty","blk","attack.block/new-garbage","position","length","height","simple","x","y","attack.point/point","attack.block/dissolve-block-default-ticks","block","p__21670","map__21671","cljs.core/--destructure-map","vec__21672","cljs.core.get","cljs.core.nth","attack.block/garbage-block-points","ox","oy","iter__5480__auto__","s__21677","cljs.core/LazySeq","temp__5825__auto__","cljs.core/seq","xs__6385__auto__","cljs.core/first","iterys__5476__auto__","s__21679","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__21681","cljs.core/chunk-buffer","i__21680","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__21678","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5477__auto__","cljs.core.concat","iter__21676","cljs.core.range","attack.block/new-dissolve","ticks","pending-blocks","p1__21690#","cljs.core.map","p__21792","map__21795","attack.block/resolve-dissolve","pending","attack.tick/ticks0?","cljs.core.into","attack.block/new-disappear","cljs.core.merge","attack.block/falling-block-default-ticks","p__21815","map__21819","attack.block/new-falling","attack.point/below","p__21821","map__21822","attack.block/compare-type?","block-type","compare-type","cljs.core._EQ_","attack.block/falling?","attack.block/dissolve?","attack.block/swap-empty?","attack.block/garbage?","attack.block/simple?","cljs.core/contains?","attack.block/disappear?","p__21823","map__21827","attack.block/unwrap-falling","inner-block","fall-to","cljs.core.assoc","p__21828","map__21830","attack.block/should-resolve-falling?","p__21831","map__21832","attack.block/resolve-falling","p__21840","map__21841","attack.block/should-resolve-swap-empty?","inner","into-pos","p__21842","map__21843","attack.block/resolve-swap-empty","p__21848","map__21852","attack.block/swap?","p__21856","vec__21857","attack.block/blocks-swap!","map__21860","map__21861","a-pos","b-pos","attack.block/should-resolve-swap?","attack.block/resolve-swaps","cljs.core/flatten","p__21863","p__21864","map__21865","map__21866","attack.block/same-type?","cljs.core/chunk-first"],"sourcesContent":["; DO NOT EDIT THIS FILE! IT WAS AUTOMATICALLY GENERATED BY\n; lein-cljsbuild FROM THE FOLLOWING SOURCE FILE:\n; file:/Users/jamiely/code/tetris-attack-clojure/src/clj/attack/block.clj\n\n(ns attack.block\n  (:require [attack.tick :as tick]\n            [attack.point :as pt]))\n\n(defn types []\n  \"Lists available block types\"\n  [\"#996633\" \"#FFFF00\" \"#FF6699\" \"#00FFFF\" \"#00FF00\" \"#9900CC\" \"#FF0000\"])\n\n(defn rand-type []\n  \"Returns a random block type\"\n  (rand-nth (types)))\n\n(defn new-simple [pos type]\n  \"Returns a simple block, not to be confused with non-basic blocks such as garbage blocks\"\n  {:type type\n   :position pos})\n\n;; complex blocks must be all of a single type\n(defn new-complex[blocks]\n  \"Creates a complex block given a passed sequence of blocks\"\n  {:blocks blocks})\n\n(defn swap-block-default-ticks [] 5)\n\n(defn new-swap [a b]\n  \"Creates a swap block, which represents two blocks which will change positions when the tick count has reached 0\"\n  {:blocks [a b]\n   :ticks (swap-block-default-ticks)\n   :type :swap})\n\n(defn new-swap-empty [blk pos]\n  \"Creates a new block which represents a block which has been moved into empty space\"\n  {:type :swap-empty\n   :block blk\n   :into-position pos\n   :ticks (swap-block-default-ticks)})\n\n(defn new-garbage [position length height]\n  \"Creates a new garbage block\"\n  (let [simple (fn [x y] new-simple (pt/point x y) :black)]\n  {:type :garbage\n   :position position\n   :length length\n   :height height}))\n\n(defn dissolve-block-default-ticks [block] 30)\n\n(defn garbage-block-points [{[ox oy] :position length :length\n                             height :height :as block}]\n  (for [x (range 0 length)\n        y (range 0 height)]\n    (pt/point (+ ox x) (- oy y))))\n\n(defn new-dissolve [block]\n  (let [ticks (dissolve-block-default-ticks block)\n        pending-blocks (map #(new-simple % (rand-type))\n                            (garbage-block-points block))]\n    {:type :dissolve\n     :garbage-block block\n     :ticks ticks\n     ;; these are the blocks that will replace the garbage block\n     :pending-blocks pending-blocks\n     :starting-ticks ticks}))\n\n(defn resolve-dissolve [{pending :pending-blocks :as block}]\n  (if (tick/ticks0? block)\n    (into #{} pending)\n    #{block}))\n\n(defn new-disappear [blocks]\n  (merge (new-complex blocks)\n         {:ticks 15\n          :type :disappear}))\n\n(defn falling-block-default-ticks [] 5)\n\n(defn new-falling [{pos :position :as block}]\n  \"Takes a single block and returns a falling block.\"\n  {:type :falling\n   :block block\n   :position pos\n   :ticks (falling-block-default-ticks)\n   :falling-to (pt/below pos)\n   })\n\n(defn compare-type? [{block-type :type} compare-type]\n  (= block-type compare-type))\n\n(defn falling? [blk] (compare-type? blk :falling))\n(defn dissolve? [blk] (compare-type? blk :dissolve))\n\n(defn swap-empty? [blk] (compare-type? blk :swap-empty))\n\n(defn garbage? [block]\n  (compare-type? block :garbage))\n\n(defn simple? [blk]\n  (and (contains? blk :position)\n       (not (garbage? blk))\n       (not (falling? blk))))\n\n(defn disappear? [block]\n  (compare-type? block :disappear))\n\n(defn unwrap-falling [{inner-block :block fall-to :falling-to :as block}]\n  \"Unwraps a falling block, returning the inner block with its updated position\"\n  (if (falling? block)\n    (assoc inner-block :position fall-to)\n    block))\n\n(defn should-resolve-falling? [{ticks :ticks :as block}]\n  \"Determines if a falling block should be removed\"\n  (tick/ticks0? block))\n\n(defn resolve-falling [{ticks :ticks :as block}]\n  \"Unwraps a falling block if its ticks are 0\"\n  (unwrap-falling block))\n\n(defn should-resolve-swap-empty? [{inner :block into-pos :into-position :as block}]\n  (and (tick/ticks0? block) (swap-empty? block)))\n\n(defn resolve-swap-empty [{inner :block\n                           into-pos :into-position :as block}]\n  (assoc inner :position into-pos))\n\n(defn swap? [{type :type}]\n  (= type :swap))\n\n(defn blocks-swap! [[a b]]\n  (let [{a-pos :position} a\n        {b-pos :position} b]\n    [(assoc a :position b-pos)\n     (assoc b :position a-pos)]))\n\n(defn should-resolve-swap? [blk]\n  (and (swap? blk) (tick/ticks0? blk)))\n\n(defn resolve-swaps [blocks]\n  \"Dissolves swap blocks when the ticks reach 0\"\n  (flatten\n   (map (fn [blk]\n        (if (and (swap? blk) (tick/ticks0? blk))\n          (blocks-swap! (:blocks blk))\n          blk))\n        blocks)))\n\n(defn same-type? [{a :type} {b :type}]\n  (= a b))\n\n"]}